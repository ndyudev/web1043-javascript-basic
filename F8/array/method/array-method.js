// üß© Video 106: Array Method
console.log("Video 106: Array Method");

/**
 * üß† T·ªïng h·ª£p c√°c ph∆∞∆°ng th·ª©c l√†m vi·ªác v·ªõi m·∫£ng trong JS:
 * -----------------------------------------------------
 * 1Ô∏è‚É£ forEach()   ‚Äî Duy·ªát qua t·ª´ng ph·∫ßn t·ª≠ (kh√¥ng return)
 * 2Ô∏è‚É£ every()     ‚Äî Ki·ªÉm tra T·∫§T C·∫¢ ph·∫ßn t·ª≠ c√≥ th·ªèa ƒëi·ªÅu ki·ªán kh√¥ng
 * 3Ô∏è‚É£ some()      ‚Äî Ki·ªÉm tra CH·ªà C·∫¶N 1 ph·∫ßn t·ª≠ th·ªèa ƒëi·ªÅu ki·ªán
 * 4Ô∏è‚É£ find()      ‚Äî T√¨m ph·∫ßn t·ª≠ ƒê·∫¶U TI√äN th·ªèa ƒëi·ªÅu ki·ªán
 * 5Ô∏è‚É£ filter()    ‚Äî L·ªçc ra t·∫•t c·∫£ ph·∫ßn t·ª≠ th·ªèa ƒëi·ªÅu ki·ªán
 * 6Ô∏è‚É£ map()       ‚Äî T·∫°o m·∫£ng m·ªõi t·ª´ m·∫£ng g·ªëc (bi·∫øn ƒë·ªïi t·ª´ng ph·∫ßn t·ª≠)
 * 7Ô∏è‚É£ reduce()    ‚Äî T√≠ch l≈©y gi√° tr·ªã c·ªßa m·∫£ng th√†nh 1 k·∫øt qu·∫£ duy nh·∫•t
 * 8Ô∏è‚É£ includes()  ‚Äî Ki·ªÉm tra xem c√≥ ph·∫ßn t·ª≠/chu·ªói c·ª• th·ªÉ kh√¥ng
 */

let courses = [
  { id: 1, name: "javascript", coin: 250 },
  { id: 2, name: "Front End Develop", coin: 0 },
  { id: 3, name: "Java Spring Boot", coin: 210 },
  { id: 4, name: "Full Stack MERN JS", coin: 340 },
  { id: 5, name: "Front End Develop", coin: 15 },
];

/* -----------------------------------
 * üîπ 1. forEach() ‚Äî Duy·ªát qua t·ª´ng ph·∫ßn t·ª≠
 * ----------------------------------- */
courses.forEach((course, index) => {
  console.log(index, course);
});

/* -----------------------------------
 * üîπ 2. every() ‚Äî Ki·ªÉm tra T·∫§T C·∫¢ ph·∫ßn t·ª≠
 * ----------------------------------- */
let isFreeEvery = courses.every((course) => course.coin === 0);
console.log("T·∫•t c·∫£ ƒë·ªÅu free? üëâ", isFreeEvery);

/* -----------------------------------
 * üîπ 3. some() ‚Äî Ki·ªÉm tra CH·ªà C·∫¶N 1 ph·∫ßn t·ª≠
 * ----------------------------------- */
let isFreeSome = courses.some((course) => course.coin === 0);
console.log("C√≥ kh√≥a h·ªçc n√†o free kh√¥ng? üëâ", isFreeSome);

/* -----------------------------------
 * üîπ 4. find() ‚Äî T√¨m ph·∫ßn t·ª≠ ƒê·∫¶U TI√äN
 * ----------------------------------- */
let firstFrontEnd = courses.find(
  (course) => course.name === "Front End Develop"
);
console.log("T√¨m b·∫±ng find() üëâ", firstFrontEnd);

/* -----------------------------------
 * üîπ 5. filter() ‚Äî L·ªçc danh s√°ch
 * ----------------------------------- */
let listCourse = courses.filter(
  (course) => course.name === "Front End Develop"
);
console.log("Danh s√°ch kh√≥a Front End Develop üëâ", listCourse);

/* -----------------------------------
 * üîπ 6. map() ‚Äî Bi·∫øn ƒë·ªïi t·ª´ng ph·∫ßn t·ª≠ ‚Üí m·∫£ng m·ªõi
 * ----------------------------------- */
let newCourses = courses.map((course, index) => ({
  id: course.id,
  name: `Kh√≥a h·ªçc ${course.name}`,
  coin: course.coin,
  coinText: `Gi√°: ${course.coin}`,
  index: index,
  originArray: course,
}));
console.log(newCourses);

// L·∫•y danh s√°ch ch·ªâ c√≥ t√™n kh√≥a h·ªçc
let newNameCourses = courses.map((course) => ({ name: course.name }));
console.log(newNameCourses);

/* -----------------------------------
 * üîπ 7. reduce() ‚Äî Gom d·ªØ li·ªáu l·∫°i
 * ----------------------------------- */
let i = 0;
function totalCoinCourse(accumulator, currentValue, currentIndex, originArray) {
  i++;
  console.table({
    "L∆∞·ª£t ch·∫°y": i,
    "T√≠ch l≈©y": accumulator,
    "Coin hi·ªán t·∫°i": currentValue.coin,
    Index: currentIndex,
  });
  return accumulator + currentValue.coin;
}
let totalCoinCourses = courses.reduce(totalCoinCourse, 0);
console.log("T·ªïng coin b·∫±ng reduce üëâ", totalCoinCourses);

// So s√°nh v·ªõi loop th∆∞·ªùng
let totalCoin = 0;
for (const course of courses) totalCoin += course.coin;
console.log("T·ªïng coin b·∫±ng loop üëâ", totalCoin);

/* -----------------------------------
 * üîπ Reduce ‚Äî L√†m ph·∫≥ng m·∫£ng (Flat array)
 * ----------------------------------- */
let depthArray = [1, 2, [3, 4], 5, 6, [7, 8, 9]];
let flatArray = depthArray.reduce((flat, item) => flat.concat(item), []);
console.log(flatArray);

/* -----------------------------------
 * üîπ Reduce ‚Äî L·∫•y to√†n b·ªô kho√° h·ªçc trong topics
 * ----------------------------------- */
let topics = [
  {
    topic: "Front-end",
    courses: [
      { id: 1, title: "HTML, CSS" },
      { id: 2, title: "Vue, Tailwind" },
      { id: 3, title: "React, Bootstrap" },
    ],
  },
  {
    topic: "Back-end",
    courses: [
      { id: 1, title: "Node JS, Javascript" },
      { id: 2, title: "Spring Boot, Java" },
      { id: 3, title: "Angular, Python" },
    ],
  },
];

let newCoursesTopic = topics.reduce(
  (all, topic) => all.concat(topic.courses),
  []
);
console.log(newCoursesTopic);

// Render ra HTML (gi·∫£ l·∫≠p)
let htmlCourses = newCoursesTopic.map(
  (course) => `
  <div>
    <h2>${course.title}</h2>
    <p>ID: ${course.id}</p>
  </div>
`
);
console.log(htmlCourses.join(""));

/* -----------------------------------
 * üîπ 8. includes() ‚Äî Ki·ªÉm tra chu·ªói/m·∫£ng
 * ----------------------------------- */
// String
let title = "Responsive web design";
console.log(title.includes("web", 11)); // false

// Array
let coursesArray = ["PHP", "Java", "JS"];
console.log(coursesArray.includes("Java")); // true

// B√†i t·∫≠p includes
let cars = ["Rolls-Royce", "Mercedes", "Lexus", "BMW", "Audi"];
function checkCar(cars) {
  return cars.includes("Mercedes", 2);
}
console.log(checkCar(cars)); // false

/* -----------------------------------
 * üé¨ B√†i t·∫≠p reduce() ‚Äî T√≠nh ƒëi·ªÉm trung b√¨nh IMDB
 * ----------------------------------- */
function calculateRating(watchList) {
  let directorNolan = watchList.filter(
    (film) => film.Director === "Christopher Nolan"
  );
  let total = directorNolan.reduce(
    (sum, film) => sum + parseFloat(film.imdbRating),
    0
  );
  return total / directorNolan.length;
}
console.log(calculateRating(watchList));

/* -----------------------------------
 * üîπ M√¥ ph·ªèng reduce() ‚Äî Vi·∫øt l·∫°i reduce2
 * ----------------------------------- */
Array.prototype.reduce2 = function (callback, initialValue) {
  let i = 0;
  let result = initialValue ?? this[0];
  if (initialValue === undefined) i = 1;
  for (; i < this.length; i++) {
    result = callback(result, this[i], i, this);
  }
  return result;
};

const numbers = [1, 2, 3, 4, 5];
const result = numbers.reduce2((total, num) => total + num, 0);
console.log(result); // 15

/* -----------------------------------
 * üîπ B√†i t·∫≠p: Chuy·ªÉn arr ‚Üí obj b·∫±ng reduce
 * ----------------------------------- */
var arr = [
  ["name", "S∆°n ƒê·∫∑ng"],
  ["age", 18],
];

function arrToObj(arr) {
  return arr.reduce((obj, [key, value]) => {
    obj[key] = value;
    return obj;
  }, {});
}
console.log(arrToObj(arr)); // { name: 'S∆°n ƒê·∫∑ng', age: 18 }

/* -----------------------------------
 * üèÖ B√†i t·∫≠p 1: T√≠nh t·ªïng s·ªë huy ch∆∞∆°ng v√†ng
 * ----------------------------------- */
var sports = [
  { name: "B∆°i l·ªôi", gold: 11 },
  { name: "Boxing", gold: 3 },
  { name: "ƒê·∫°p xe", gold: 4 },
  { name: "ƒê·∫•u ki·∫øm", gold: 5 },
];

function getTotalGold(sports) {
  return sports.reduce((total, sport) => total + sport.gold, 0);
}
console.log(getTotalGold(sports)); // 23

/* -----------------------------------
 * üèÜ B√†i t·∫≠p 2: L·ªçc m√¥n th·ªÉ thao y√™u th√≠ch
 * ----------------------------------- */
const sportsLike = [
  { name: "B√≥ng r·ªï", like: 6 },
  { name: "B∆°i l·ªôi", like: 5 },
  { name: "B√≥ng ƒë√°", like: 10 },
];

function getMostFavoriteSport(sports) {
  return sports.filter((sport) => sport.like > 5);
}
console.log(getMostFavoriteSport(sportsLike));

/* --------------------------------------------------------------
 * üìã T·ªîNG H·ª¢P C√ÅC PH∆Ø∆†NG TH·ª®C M·∫¢NG TRONG JS
 * --------------------------------------------------------------
 * | Method   | Tr·∫£ v·ªÅ      | M·ª•c ƒë√≠ch                            |
 * |----------|-------------|------------------------------------ |
 * | forEach  | undefined   | Duy·ªát qua m·∫£ng                      |
 * | every    | boolean     | Ki·ªÉm tra t·∫•t c·∫£ th·ªèa ƒëi·ªÅu ki·ªán      |
 * | some     | boolean     | Ki·ªÉm tra ch·ªâ c·∫ßn 1 th·ªèa ƒëi·ªÅu ki·ªán   |
 * | find     | object      | L·∫•y ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n th·ªèa ƒëi·ªÅu ki·ªán |
 * | filter   | array       | L·ªçc danh s√°ch th·ªèa ƒëi·ªÅu ki·ªán        |
 * | map      | array       | Bi·∫øn ƒë·ªïi m·∫£ng sang m·∫£ng m·ªõi         |
 * | reduce   | any         | T√≠ch l≈©y k·∫øt qu·∫£ (t·ªïng, g·ªôp, v.v)   |
 * --------------------------------------------------------------
 */
